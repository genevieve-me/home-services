#!/usr/sbin/nft -f

flush ruleset

table inet filter {
    chain input {
        type filter hook input priority filter; policy drop;

        # Allow established and related connections
        ct state {established, related} accept

        # Drop invalid packets
        ct state invalid drop

        # Allow from loopback interface
        iifname "lo" accept

        # Rate-limited ICMP
        ip protocol icmp icmp type echo-request limit rate 5/second accept
        icmpv6 type echo-request limit rate 5/second accept

        # Allow essential ICMP types
        # echo-reply should be accepted by established/related rule, but include here too for completeness
        ip protocol icmp icmp type { echo-reply, destination-unreachable, time-exceeded, parameter-problem } accept
        icmpv6 type {
            echo-reply,
            nd-neighbor-solicit,
            nd-neighbor-advert,
            nd-router-advert,
            nd-redirect,
            destination-unreachable,
            packet-too-big,
            time-exceeded,
            parameter-problem
        } accept
        # allow multicast listener discovery for syncthing
        icmpv6 type { mld-listener-query, mld-listener-report, mld2-listener-report, mld-listener-done } accept

        # Allow inbound DHCPv6 server responses
        # This allows the initial ADVERTISE and subsequent REPLY packets
        # the packets are not caught by established,related rule because
        # SOLICIT is sent to multicast ff02::1:2 and response comes from a different server address
        # Restrict this to link-local addresses as this is where DHCPv6 operates
        ip6 saddr fe80::/10 ip6 daddr fe80::/10 udp sport 547 udp dport 546 accept

        # Allow incoming traffic on specific ports with rate limiting for new connections
        # Existing connections are matched above by established/related
        tcp dport { 22, 22000 } ct state new limit rate 5/minute accept # SSH, Syncthing TCP
        # HTTP/HTTPS on redirected reverse proxy ports
        # keep 80/443 for locally-originating connections and for clarity
        tcp dport { 80, 443, {{ caddy_http_port }}, {{ caddy_https_port }} } ct state new limit rate 30/minute burst 10 packets accept

        # mDNS for Local Service Discovery
        # Allow packets destined for the well-known IPv6 mDNS link-local multicast address.
        # The ff02:: scope ensures these packets only come from the local network.
        ip6 daddr ff02::fb udp dport 5353 accept

        # Also allow packets sourced from any link-local address, which is another
        # robust way to identify local-only traffic.
        ip6 saddr fe80::/10 udp dport 5353 accept

        # For IPv4 compatibility (e.g. .local addresses from older devices)
        ip daddr 224.0.0.251 udp dport 5353 accept

        # QUIC, QUIC/HTTP3, Syncthing Discovery
        udp dport { 443, 21027, 22000 } accept

        # Log and drop everything else
        log prefix "nft dropped: " limit rate 5/minute
        drop
    }

    chain forward {
        # drop all packets with external destination. would need to be changed for external 'VPN'
        type filter hook forward priority filter; policy drop;
    }

    chain output {
        # allow all output
        # be stricter here too? need to connect to ghcr/docker.io, nextcloud store, ...?
        type filter hook output priority filter; policy accept;
    }
}

table inet podman-nat {
    chain prerouting {
        type nat hook prerouting priority dstnat; policy accept;
        # Redirect HTTP/HTTPS to rootless Caddy container
        tcp dport 80 redirect to :{{ caddy_http_port }}
        tcp dport 443 redirect to :{{ caddy_https_port }}
        # Redirect QUIC/HTTP3 traffic to Caddy
        udp dport 443 redirect to :{{ caddy_https_port }}
    }
}
